// Automatically generated by MockGen. DO NOT EDIT!
// Source: query.go

package skydb

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Func interface
type MockFunc struct {
	ctrl     *gomock.Controller
	recorder *_MockFuncRecorder
}

// Recorder for MockFunc (not exported)
type _MockFuncRecorder struct {
	mock *MockFunc
}

func NewMockFunc(ctrl *gomock.Controller) *MockFunc {
	mock := &MockFunc{ctrl: ctrl}
	mock.recorder = &_MockFuncRecorder{mock}
	return mock
}

func (_m *MockFunc) EXPECT() *_MockFuncRecorder {
	return _m.recorder
}

func (_m *MockFunc) Args() []interface{} {
	ret := _m.ctrl.Call(_m, "Args")
	ret0, _ := ret[0].([]interface{})
	return ret0
}

func (_mr *_MockFuncRecorder) Args() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Args")
}

func (_m *MockFunc) DataType() DataType {
	ret := _m.ctrl.Call(_m, "DataType")
	ret0, _ := ret[0].(DataType)
	return ret0
}

func (_mr *_MockFuncRecorder) DataType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataType")
}

// Mock of KeyPathFunc interface
type MockKeyPathFunc struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyPathFuncRecorder
}

// Recorder for MockKeyPathFunc (not exported)
type _MockKeyPathFuncRecorder struct {
	mock *MockKeyPathFunc
}

func NewMockKeyPathFunc(ctrl *gomock.Controller) *MockKeyPathFunc {
	mock := &MockKeyPathFunc{ctrl: ctrl}
	mock.recorder = &_MockKeyPathFuncRecorder{mock}
	return mock
}

func (_m *MockKeyPathFunc) EXPECT() *_MockKeyPathFuncRecorder {
	return _m.recorder
}

func (_m *MockKeyPathFunc) ReferencedKeyPaths() []string {
	ret := _m.ctrl.Call(_m, "ReferencedKeyPaths")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockKeyPathFuncRecorder) ReferencedKeyPaths() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReferencedKeyPaths")
}

// Mock of Visitor interface
type MockVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockVisitorRecorder
}

// Recorder for MockVisitor (not exported)
type _MockVisitorRecorder struct {
	mock *MockVisitor
}

func NewMockVisitor(ctrl *gomock.Controller) *MockVisitor {
	mock := &MockVisitor{ctrl: ctrl}
	mock.recorder = &_MockVisitorRecorder{mock}
	return mock
}

func (_m *MockVisitor) EXPECT() *_MockVisitorRecorder {
	return _m.recorder
}

// Mock of FullQueryVisitor interface
type MockFullQueryVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockFullQueryVisitorRecorder
}

// Recorder for MockFullQueryVisitor (not exported)
type _MockFullQueryVisitorRecorder struct {
	mock *MockFullQueryVisitor
}

func NewMockFullQueryVisitor(ctrl *gomock.Controller) *MockFullQueryVisitor {
	mock := &MockFullQueryVisitor{ctrl: ctrl}
	mock.recorder = &_MockFullQueryVisitorRecorder{mock}
	return mock
}

func (_m *MockFullQueryVisitor) EXPECT() *_MockFullQueryVisitorRecorder {
	return _m.recorder
}

func (_m *MockFullQueryVisitor) VisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "VisitQuery", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) VisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitQuery", arg0)
}

func (_m *MockFullQueryVisitor) EndVisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "EndVisitQuery", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) EndVisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitQuery", arg0)
}

func (_m *MockFullQueryVisitor) VisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "VisitPredicate", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) VisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitPredicate", arg0)
}

func (_m *MockFullQueryVisitor) EndVisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "EndVisitPredicate", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) EndVisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitPredicate", arg0)
}

func (_m *MockFullQueryVisitor) VisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "VisitSort", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) VisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitSort", arg0)
}

func (_m *MockFullQueryVisitor) EndVisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "EndVisitSort", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) EndVisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitSort", arg0)
}

func (_m *MockFullQueryVisitor) VisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "VisitExpression", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) VisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitExpression", arg0)
}

func (_m *MockFullQueryVisitor) EndVisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "EndVisitExpression", _param0)
}

func (_mr *_MockFullQueryVisitorRecorder) EndVisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitExpression", arg0)
}

// Mock of QueryVisitor interface
type MockQueryVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockQueryVisitorRecorder
}

// Recorder for MockQueryVisitor (not exported)
type _MockQueryVisitorRecorder struct {
	mock *MockQueryVisitor
}

func NewMockQueryVisitor(ctrl *gomock.Controller) *MockQueryVisitor {
	mock := &MockQueryVisitor{ctrl: ctrl}
	mock.recorder = &_MockQueryVisitorRecorder{mock}
	return mock
}

func (_m *MockQueryVisitor) EXPECT() *_MockQueryVisitorRecorder {
	return _m.recorder
}

func (_m *MockQueryVisitor) VisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "VisitQuery", _param0)
}

func (_mr *_MockQueryVisitorRecorder) VisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitQuery", arg0)
}

func (_m *MockQueryVisitor) EndVisitQuery(_param0 Query) {
	_m.ctrl.Call(_m, "EndVisitQuery", _param0)
}

func (_mr *_MockQueryVisitorRecorder) EndVisitQuery(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitQuery", arg0)
}

// Mock of PredicateVisitor interface
type MockPredicateVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockPredicateVisitorRecorder
}

// Recorder for MockPredicateVisitor (not exported)
type _MockPredicateVisitorRecorder struct {
	mock *MockPredicateVisitor
}

func NewMockPredicateVisitor(ctrl *gomock.Controller) *MockPredicateVisitor {
	mock := &MockPredicateVisitor{ctrl: ctrl}
	mock.recorder = &_MockPredicateVisitorRecorder{mock}
	return mock
}

func (_m *MockPredicateVisitor) EXPECT() *_MockPredicateVisitorRecorder {
	return _m.recorder
}

func (_m *MockPredicateVisitor) VisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "VisitPredicate", _param0)
}

func (_mr *_MockPredicateVisitorRecorder) VisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitPredicate", arg0)
}

func (_m *MockPredicateVisitor) EndVisitPredicate(_param0 Predicate) {
	_m.ctrl.Call(_m, "EndVisitPredicate", _param0)
}

func (_mr *_MockPredicateVisitorRecorder) EndVisitPredicate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitPredicate", arg0)
}

// Mock of SortVisitor interface
type MockSortVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockSortVisitorRecorder
}

// Recorder for MockSortVisitor (not exported)
type _MockSortVisitorRecorder struct {
	mock *MockSortVisitor
}

func NewMockSortVisitor(ctrl *gomock.Controller) *MockSortVisitor {
	mock := &MockSortVisitor{ctrl: ctrl}
	mock.recorder = &_MockSortVisitorRecorder{mock}
	return mock
}

func (_m *MockSortVisitor) EXPECT() *_MockSortVisitorRecorder {
	return _m.recorder
}

func (_m *MockSortVisitor) VisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "VisitSort", _param0)
}

func (_mr *_MockSortVisitorRecorder) VisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitSort", arg0)
}

func (_m *MockSortVisitor) EndVisitSort(_param0 Sort) {
	_m.ctrl.Call(_m, "EndVisitSort", _param0)
}

func (_mr *_MockSortVisitorRecorder) EndVisitSort(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitSort", arg0)
}

// Mock of ExpressionVisitor interface
type MockExpressionVisitor struct {
	ctrl     *gomock.Controller
	recorder *_MockExpressionVisitorRecorder
}

// Recorder for MockExpressionVisitor (not exported)
type _MockExpressionVisitorRecorder struct {
	mock *MockExpressionVisitor
}

func NewMockExpressionVisitor(ctrl *gomock.Controller) *MockExpressionVisitor {
	mock := &MockExpressionVisitor{ctrl: ctrl}
	mock.recorder = &_MockExpressionVisitorRecorder{mock}
	return mock
}

func (_m *MockExpressionVisitor) EXPECT() *_MockExpressionVisitorRecorder {
	return _m.recorder
}

func (_m *MockExpressionVisitor) VisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "VisitExpression", _param0)
}

func (_mr *_MockExpressionVisitorRecorder) VisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VisitExpression", arg0)
}

func (_m *MockExpressionVisitor) EndVisitExpression(_param0 Expression) {
	_m.ctrl.Call(_m, "EndVisitExpression", _param0)
}

func (_mr *_MockExpressionVisitorRecorder) EndVisitExpression(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EndVisitExpression", arg0)
}
