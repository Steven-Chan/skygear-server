// Copyright 2015-present Oursky Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package skydb

import (
	"time"

	"golang.org/x/crypto/bcrypt"

	"github.com/skygeario/skygear-server/pkg/server/utils"
	"github.com/skygeario/skygear-server/pkg/server/uuid"
)

// ProviderInfo represents the dictionary of authenticated principal ID => authData.
//
// For example, a AuthInfo connected with a Facebook account might
// look like this:
//
//   {
//     "com.facebook:46709394": {
//       "accessToken": "someAccessToken",
//       "expiredAt": "2015-02-26T20:05:48",
//       "facebookID": "46709394"
//     }
//   }
//
// It is assumed that the Facebook AuthProvider has "com.facebook" as
// provider name and "46709394" as the authenticated Facebook account ID.
type ProviderInfo map[string]map[string]interface{}

// AuthInfo contains a user's information for authentication purpose
type AuthInfo struct {
	ID              string       `json:"_id"`
	HashedPassword  []byte       `json:"password,omitempty"`
	Roles           []string     `json:"roles,omitempty"`
	ProviderInfo    ProviderInfo `json:"provider_info,omitempty"` // auth data for alternative methods
	TokenValidSince *time.Time   `json:"token_valid_since,omitempty"`
	LastLoginAt     *time.Time   `json:"last_login_at,omitempty"`
	LastSeenAt      *time.Time   `json:"last_seen_at,omitempty"`
}

// AuthData contains the unique authentication data of a user
// e.g.: {"username": "userA", "email": "userA@abc.com"}
type AuthData map[string]interface{}

// NewAuthInfo returns a new AuthInfo with specified password.
// An UUID4 ID will be generated by the system as unique identifier
func NewAuthInfo(password string) AuthInfo {
	info := AuthInfo{
		ID: uuid.New(),
	}
	info.SetPassword(password)

	return info
}

// NewAnonymousAuthInfo returns an anonymous AuthInfo, which has
// no Password.
func NewAnonymousAuthInfo() AuthInfo {
	return AuthInfo{
		ID: uuid.New(),
	}
}

// NewProviderInfoAuthInfo returns an AuthInfo provided by a AuthProvider,
// which has no Password.
func NewProviderInfoAuthInfo(principalID string, authData map[string]interface{}) AuthInfo {
	return AuthInfo{
		ID: uuid.New(),
		ProviderInfo: ProviderInfo(map[string]map[string]interface{}{
			principalID: authData,
		}),
	}
}

// SetPassword sets the HashedPassword with the password specified
func (info *AuthInfo) SetPassword(password string) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		panic("authinfo: Failed to hash password")
	}

	info.HashedPassword = hashedPassword

	// Changing the password will also update the time before which issued
	// access token should be invalidated.
	timeNow := time.Now().UTC()
	info.TokenValidSince = &timeNow
}

// IsSamePassword determines whether the specified password is the same
// password as where the HashedPassword is generated from
func (info AuthInfo) IsSamePassword(password string) bool {
	return bcrypt.CompareHashAndPassword(info.HashedPassword, []byte(password)) == nil
}

// SetProviderInfoData sets the auth data to the specified principal.
func (info *AuthInfo) SetProviderInfoData(principalID string, authData map[string]interface{}) {
	if info.ProviderInfo == nil {
		info.ProviderInfo = make(map[string]map[string]interface{})
	}
	info.ProviderInfo[principalID] = authData
}

// HasAnyRoles return true if authinfo belongs to one of the supplied roles
func (info *AuthInfo) HasAnyRoles(roles []string) bool {
	return utils.StringSliceContainAny(info.Roles, roles)
}

// HasAllRoles return true if authinfo has all roles supplied
func (info *AuthInfo) HasAllRoles(roles []string) bool {
	return utils.StringSliceContainAll(info.Roles, roles)
}

// GetProviderInfoData gets the auth data for the specified principal.
func (info *AuthInfo) GetProviderInfoData(principalID string) map[string]interface{} {
	if info.ProviderInfo == nil {
		return nil
	}
	value, _ := info.ProviderInfo[principalID]
	return value
}

// RemoveProviderInfoData remove the auth data for the specified principal.
func (info *AuthInfo) RemoveProviderInfoData(principalID string) {
	if info.ProviderInfo != nil {
		delete(info.ProviderInfo, principalID)
	}
}
