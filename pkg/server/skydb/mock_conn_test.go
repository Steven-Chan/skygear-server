// Automatically generated by MockGen. DO NOT EDIT!
// Source: conn.go

package skydb

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Conn interface
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *_MockConnRecorder
}

// Recorder for MockConn (not exported)
type _MockConnRecorder struct {
	mock *MockConn
}

func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &_MockConnRecorder{mock}
	return mock
}

func (_m *MockConn) EXPECT() *_MockConnRecorder {
	return _m.recorder
}

func (_m *MockConn) CreateAuth(authinfo *AuthInfo) error {
	ret := _m.ctrl.Call(_m, "CreateAuth", authinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) CreateAuth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAuth", arg0)
}

func (_m *MockConn) GetAuth(id string, authinfo *AuthInfo) error {
	ret := _m.ctrl.Call(_m, "GetAuth", id, authinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) GetAuth(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuth", arg0, arg1)
}

func (_m *MockConn) GetAuthByPrincipalID(principalID string, authinfo *AuthInfo) error {
	ret := _m.ctrl.Call(_m, "GetAuthByPrincipalID", principalID, authinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) GetAuthByPrincipalID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAuthByPrincipalID", arg0, arg1)
}

func (_m *MockConn) UpdateAuth(authinfo *AuthInfo) error {
	ret := _m.ctrl.Call(_m, "UpdateAuth", authinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) UpdateAuth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAuth", arg0)
}

func (_m *MockConn) DeleteAuth(id string) error {
	ret := _m.ctrl.Call(_m, "DeleteAuth", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) DeleteAuth(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAuth", arg0)
}

func (_m *MockConn) GetAdminRoles() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetAdminRoles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetAdminRoles() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAdminRoles")
}

func (_m *MockConn) SetAdminRoles(roles []string) error {
	ret := _m.ctrl.Call(_m, "SetAdminRoles", roles)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SetAdminRoles(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetAdminRoles", arg0)
}

func (_m *MockConn) GetDefaultRoles() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetDefaultRoles")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetDefaultRoles() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDefaultRoles")
}

func (_m *MockConn) SetDefaultRoles(roles []string) error {
	ret := _m.ctrl.Call(_m, "SetDefaultRoles", roles)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SetDefaultRoles(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDefaultRoles", arg0)
}

func (_m *MockConn) AssignRoles(userIDs []string, roles []string) error {
	ret := _m.ctrl.Call(_m, "AssignRoles", userIDs, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) AssignRoles(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AssignRoles", arg0, arg1)
}

func (_m *MockConn) RevokeRoles(userIDs []string, roles []string) error {
	ret := _m.ctrl.Call(_m, "RevokeRoles", userIDs, roles)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) RevokeRoles(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RevokeRoles", arg0, arg1)
}

func (_m *MockConn) SetRecordAccess(recordType string, acl RecordACL) error {
	ret := _m.ctrl.Call(_m, "SetRecordAccess", recordType, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SetRecordAccess(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRecordAccess", arg0, arg1)
}

func (_m *MockConn) SetRecordDefaultAccess(recordType string, acl RecordACL) error {
	ret := _m.ctrl.Call(_m, "SetRecordDefaultAccess", recordType, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SetRecordDefaultAccess(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRecordDefaultAccess", arg0, arg1)
}

func (_m *MockConn) GetRecordAccess(recordType string) (RecordACL, error) {
	ret := _m.ctrl.Call(_m, "GetRecordAccess", recordType)
	ret0, _ := ret[0].(RecordACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetRecordAccess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordAccess", arg0)
}

func (_m *MockConn) GetRecordDefaultAccess(recordType string) (RecordACL, error) {
	ret := _m.ctrl.Call(_m, "GetRecordDefaultAccess", recordType)
	ret0, _ := ret[0].(RecordACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetRecordDefaultAccess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordDefaultAccess", arg0)
}

func (_m *MockConn) SetRecordFieldAccess(acl FieldACL) error {
	ret := _m.ctrl.Call(_m, "SetRecordFieldAccess", acl)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SetRecordFieldAccess(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRecordFieldAccess", arg0)
}

func (_m *MockConn) GetRecordFieldAccess() (FieldACL, error) {
	ret := _m.ctrl.Call(_m, "GetRecordFieldAccess")
	ret0, _ := ret[0].(FieldACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetRecordFieldAccess() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordFieldAccess")
}

func (_m *MockConn) GetAsset(name string, asset *Asset) error {
	ret := _m.ctrl.Call(_m, "GetAsset", name, asset)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) GetAsset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAsset", arg0, arg1)
}

func (_m *MockConn) GetAssets(names []string) ([]Asset, error) {
	ret := _m.ctrl.Call(_m, "GetAssets", names)
	ret0, _ := ret[0].([]Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) GetAssets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAssets", arg0)
}

func (_m *MockConn) SaveAsset(asset *Asset) error {
	ret := _m.ctrl.Call(_m, "SaveAsset", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SaveAsset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveAsset", arg0)
}

func (_m *MockConn) QueryRelation(user string, name string, direction string, config QueryConfig) []AuthInfo {
	ret := _m.ctrl.Call(_m, "QueryRelation", user, name, direction, config)
	ret0, _ := ret[0].([]AuthInfo)
	return ret0
}

func (_mr *_MockConnRecorder) QueryRelation(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryRelation", arg0, arg1, arg2, arg3)
}

func (_m *MockConn) QueryRelationCount(user string, name string, direction string) (uint64, error) {
	ret := _m.ctrl.Call(_m, "QueryRelationCount", user, name, direction)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) QueryRelationCount(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryRelationCount", arg0, arg1, arg2)
}

func (_m *MockConn) AddRelation(user string, name string, targetUser string) error {
	ret := _m.ctrl.Call(_m, "AddRelation", user, name, targetUser)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) AddRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddRelation", arg0, arg1, arg2)
}

func (_m *MockConn) RemoveRelation(user string, name string, targetUser string) error {
	ret := _m.ctrl.Call(_m, "RemoveRelation", user, name, targetUser)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) RemoveRelation(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveRelation", arg0, arg1, arg2)
}

func (_m *MockConn) GetDevice(id string, device *Device) error {
	ret := _m.ctrl.Call(_m, "GetDevice", id, device)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDevice", arg0, arg1)
}

func (_m *MockConn) QueryDevicesByUser(user string) ([]Device, error) {
	ret := _m.ctrl.Call(_m, "QueryDevicesByUser", user)
	ret0, _ := ret[0].([]Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) QueryDevicesByUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryDevicesByUser", arg0)
}

func (_m *MockConn) QueryDevicesByUserAndTopic(user string, topic string) ([]Device, error) {
	ret := _m.ctrl.Call(_m, "QueryDevicesByUserAndTopic", user, topic)
	ret0, _ := ret[0].([]Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnRecorder) QueryDevicesByUserAndTopic(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryDevicesByUserAndTopic", arg0, arg1)
}

func (_m *MockConn) SaveDevice(device *Device) error {
	ret := _m.ctrl.Call(_m, "SaveDevice", device)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) SaveDevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveDevice", arg0)
}

func (_m *MockConn) DeleteDevice(id string) error {
	ret := _m.ctrl.Call(_m, "DeleteDevice", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) DeleteDevice(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDevice", arg0)
}

func (_m *MockConn) DeleteDevicesByToken(token string, t time.Time) error {
	ret := _m.ctrl.Call(_m, "DeleteDevicesByToken", token, t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) DeleteDevicesByToken(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDevicesByToken", arg0, arg1)
}

func (_m *MockConn) DeleteEmptyDevicesByTime(t time.Time) error {
	ret := _m.ctrl.Call(_m, "DeleteEmptyDevicesByTime", t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) DeleteEmptyDevicesByTime(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEmptyDevicesByTime", arg0)
}

func (_m *MockConn) PublicDB() Database {
	ret := _m.ctrl.Call(_m, "PublicDB")
	ret0, _ := ret[0].(Database)
	return ret0
}

func (_mr *_MockConnRecorder) PublicDB() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PublicDB")
}

func (_m *MockConn) PrivateDB(userKey string) Database {
	ret := _m.ctrl.Call(_m, "PrivateDB", userKey)
	ret0, _ := ret[0].(Database)
	return ret0
}

func (_mr *_MockConnRecorder) PrivateDB(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PrivateDB", arg0)
}

func (_m *MockConn) UnionDB() Database {
	ret := _m.ctrl.Call(_m, "UnionDB")
	ret0, _ := ret[0].(Database)
	return ret0
}

func (_mr *_MockConnRecorder) UnionDB() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnionDB")
}

func (_m *MockConn) Subscribe(recordEventChan chan RecordEvent) error {
	ret := _m.ctrl.Call(_m, "Subscribe", recordEventChan)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Subscribe", arg0)
}

func (_m *MockConn) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConnRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
