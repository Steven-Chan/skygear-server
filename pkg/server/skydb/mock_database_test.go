// Automatically generated by MockGen. DO NOT EDIT!
// Source: database.go

package skydb

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) Conn() Conn {
	ret := _m.ctrl.Call(_m, "Conn")
	ret0, _ := ret[0].(Conn)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Conn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Conn")
}

func (_m *MockDatabase) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDatabaseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockDatabase) DatabaseType() DatabaseType {
	ret := _m.ctrl.Call(_m, "DatabaseType")
	ret0, _ := ret[0].(DatabaseType)
	return ret0
}

func (_mr *_MockDatabaseRecorder) DatabaseType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseType")
}

func (_m *MockDatabase) UserRecordType() string {
	ret := _m.ctrl.Call(_m, "UserRecordType")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDatabaseRecorder) UserRecordType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserRecordType")
}

func (_m *MockDatabase) TableName(table string) string {
	ret := _m.ctrl.Call(_m, "TableName", table)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockDatabaseRecorder) TableName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TableName", arg0)
}

func (_m *MockDatabase) IsReadOnly() bool {
	ret := _m.ctrl.Call(_m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDatabaseRecorder) IsReadOnly() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsReadOnly")
}

func (_m *MockDatabase) RemoteColumnTypes(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "RemoteColumnTypes", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) RemoteColumnTypes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteColumnTypes", arg0)
}

func (_m *MockDatabase) Get(id RecordID, record *Record) error {
	ret := _m.ctrl.Call(_m, "Get", id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockDatabase) GetByIDs(ids []RecordID) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "GetByIDs", ids)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByIDs", arg0)
}

func (_m *MockDatabase) Save(record *Record) error {
	ret := _m.ctrl.Call(_m, "Save", record)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0)
}

func (_m *MockDatabase) Delete(id RecordID) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockDatabase) Query(query *Query) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "Query", query)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

func (_m *MockDatabase) QueryCount(query *Query) (uint64, error) {
	ret := _m.ctrl.Call(_m, "QueryCount", query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) QueryCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryCount", arg0)
}

func (_m *MockDatabase) Extend(recordType string, schema RecordSchema) (bool, error) {
	ret := _m.ctrl.Call(_m, "Extend", recordType, schema)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) Extend(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Extend", arg0, arg1)
}

func (_m *MockDatabase) RenameSchema(recordType string, oldColumnName string, newColumnName string) error {
	ret := _m.ctrl.Call(_m, "RenameSchema", recordType, oldColumnName, newColumnName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) RenameSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RenameSchema", arg0, arg1, arg2)
}

func (_m *MockDatabase) DeleteSchema(recordType string, columnName string) error {
	ret := _m.ctrl.Call(_m, "DeleteSchema", recordType, columnName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) DeleteSchema(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSchema", arg0, arg1)
}

func (_m *MockDatabase) GetSchema(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetSchema", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSchema", arg0)
}

func (_m *MockDatabase) GetRecordSchemas() (map[string]RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetRecordSchemas")
	ret0, _ := ret[0].(map[string]RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDatabaseRecorder) GetRecordSchemas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordSchemas")
}

func (_m *MockDatabase) GetSubscription(key string, deviceID string, subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "GetSubscription", key, deviceID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) GetSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscription", arg0, arg1, arg2)
}

func (_m *MockDatabase) SaveSubscription(subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "SaveSubscription", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveSubscription", arg0)
}

func (_m *MockDatabase) DeleteSubscription(key string, deviceID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSubscription", key, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDatabaseRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSubscription", arg0, arg1)
}

func (_m *MockDatabase) GetSubscriptionsByDeviceID(deviceID string) []Subscription {
	ret := _m.ctrl.Call(_m, "GetSubscriptionsByDeviceID", deviceID)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

func (_mr *_MockDatabaseRecorder) GetSubscriptionsByDeviceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscriptionsByDeviceID", arg0)
}

func (_m *MockDatabase) GetMatchingSubscriptions(record *Record) []Subscription {
	ret := _m.ctrl.Call(_m, "GetMatchingSubscriptions", record)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

func (_mr *_MockDatabaseRecorder) GetMatchingSubscriptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMatchingSubscriptions", arg0)
}

// Mock of Transactional interface
type MockTransactional struct {
	ctrl     *gomock.Controller
	recorder *_MockTransactionalRecorder
}

// Recorder for MockTransactional (not exported)
type _MockTransactionalRecorder struct {
	mock *MockTransactional
}

func NewMockTransactional(ctrl *gomock.Controller) *MockTransactional {
	mock := &MockTransactional{ctrl: ctrl}
	mock.recorder = &_MockTransactionalRecorder{mock}
	return mock
}

func (_m *MockTransactional) EXPECT() *_MockTransactionalRecorder {
	return _m.recorder
}

func (_m *MockTransactional) Begin() error {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionalRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin")
}

func (_m *MockTransactional) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionalRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

func (_m *MockTransactional) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTransactionalRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

// Mock of TxDatabase interface
type MockTxDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockTxDatabaseRecorder
}

// Recorder for MockTxDatabase (not exported)
type _MockTxDatabaseRecorder struct {
	mock *MockTxDatabase
}

func NewMockTxDatabase(ctrl *gomock.Controller) *MockTxDatabase {
	mock := &MockTxDatabase{ctrl: ctrl}
	mock.recorder = &_MockTxDatabaseRecorder{mock}
	return mock
}

func (_m *MockTxDatabase) EXPECT() *_MockTxDatabaseRecorder {
	return _m.recorder
}

func (_m *MockTxDatabase) Begin() error {
	ret := _m.ctrl.Call(_m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Begin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Begin")
}

func (_m *MockTxDatabase) Commit() error {
	ret := _m.ctrl.Call(_m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Commit() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit")
}

func (_m *MockTxDatabase) Rollback() error {
	ret := _m.ctrl.Call(_m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Rollback() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rollback")
}

func (_m *MockTxDatabase) Conn() Conn {
	ret := _m.ctrl.Call(_m, "Conn")
	ret0, _ := ret[0].(Conn)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Conn() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Conn")
}

func (_m *MockTxDatabase) ID() string {
	ret := _m.ctrl.Call(_m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) ID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ID")
}

func (_m *MockTxDatabase) DatabaseType() DatabaseType {
	ret := _m.ctrl.Call(_m, "DatabaseType")
	ret0, _ := ret[0].(DatabaseType)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) DatabaseType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DatabaseType")
}

func (_m *MockTxDatabase) UserRecordType() string {
	ret := _m.ctrl.Call(_m, "UserRecordType")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) UserRecordType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UserRecordType")
}

func (_m *MockTxDatabase) TableName(table string) string {
	ret := _m.ctrl.Call(_m, "TableName", table)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) TableName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TableName", arg0)
}

func (_m *MockTxDatabase) IsReadOnly() bool {
	ret := _m.ctrl.Call(_m, "IsReadOnly")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) IsReadOnly() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsReadOnly")
}

func (_m *MockTxDatabase) RemoteColumnTypes(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "RemoteColumnTypes", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) RemoteColumnTypes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteColumnTypes", arg0)
}

func (_m *MockTxDatabase) Get(id RecordID, record *Record) error {
	ret := _m.ctrl.Call(_m, "Get", id, record)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockTxDatabase) GetByIDs(ids []RecordID) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "GetByIDs", ids)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) GetByIDs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetByIDs", arg0)
}

func (_m *MockTxDatabase) Save(record *Record) error {
	ret := _m.ctrl.Call(_m, "Save", record)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Save(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0)
}

func (_m *MockTxDatabase) Delete(id RecordID) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockTxDatabase) Query(query *Query) (*Rows, error) {
	ret := _m.ctrl.Call(_m, "Query", query)
	ret0, _ := ret[0].(*Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) Query(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0)
}

func (_m *MockTxDatabase) QueryCount(query *Query) (uint64, error) {
	ret := _m.ctrl.Call(_m, "QueryCount", query)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) QueryCount(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryCount", arg0)
}

func (_m *MockTxDatabase) Extend(recordType string, schema RecordSchema) (bool, error) {
	ret := _m.ctrl.Call(_m, "Extend", recordType, schema)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) Extend(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Extend", arg0, arg1)
}

func (_m *MockTxDatabase) RenameSchema(recordType string, oldColumnName string, newColumnName string) error {
	ret := _m.ctrl.Call(_m, "RenameSchema", recordType, oldColumnName, newColumnName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) RenameSchema(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RenameSchema", arg0, arg1, arg2)
}

func (_m *MockTxDatabase) DeleteSchema(recordType string, columnName string) error {
	ret := _m.ctrl.Call(_m, "DeleteSchema", recordType, columnName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) DeleteSchema(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSchema", arg0, arg1)
}

func (_m *MockTxDatabase) GetSchema(recordType string) (RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetSchema", recordType)
	ret0, _ := ret[0].(RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) GetSchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSchema", arg0)
}

func (_m *MockTxDatabase) GetRecordSchemas() (map[string]RecordSchema, error) {
	ret := _m.ctrl.Call(_m, "GetRecordSchemas")
	ret0, _ := ret[0].(map[string]RecordSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTxDatabaseRecorder) GetRecordSchemas() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRecordSchemas")
}

func (_m *MockTxDatabase) GetSubscription(key string, deviceID string, subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "GetSubscription", key, deviceID, subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) GetSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscription", arg0, arg1, arg2)
}

func (_m *MockTxDatabase) SaveSubscription(subscription *Subscription) error {
	ret := _m.ctrl.Call(_m, "SaveSubscription", subscription)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) SaveSubscription(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SaveSubscription", arg0)
}

func (_m *MockTxDatabase) DeleteSubscription(key string, deviceID string) error {
	ret := _m.ctrl.Call(_m, "DeleteSubscription", key, deviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) DeleteSubscription(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSubscription", arg0, arg1)
}

func (_m *MockTxDatabase) GetSubscriptionsByDeviceID(deviceID string) []Subscription {
	ret := _m.ctrl.Call(_m, "GetSubscriptionsByDeviceID", deviceID)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) GetSubscriptionsByDeviceID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSubscriptionsByDeviceID", arg0)
}

func (_m *MockTxDatabase) GetMatchingSubscriptions(record *Record) []Subscription {
	ret := _m.ctrl.Call(_m, "GetMatchingSubscriptions", record)
	ret0, _ := ret[0].([]Subscription)
	return ret0
}

func (_mr *_MockTxDatabaseRecorder) GetMatchingSubscriptions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMatchingSubscriptions", arg0)
}

// Mock of RowsIter interface
type MockRowsIter struct {
	ctrl     *gomock.Controller
	recorder *_MockRowsIterRecorder
}

// Recorder for MockRowsIter (not exported)
type _MockRowsIterRecorder struct {
	mock *MockRowsIter
}

func NewMockRowsIter(ctrl *gomock.Controller) *MockRowsIter {
	mock := &MockRowsIter{ctrl: ctrl}
	mock.recorder = &_MockRowsIterRecorder{mock}
	return mock
}

func (_m *MockRowsIter) EXPECT() *_MockRowsIterRecorder {
	return _m.recorder
}

func (_m *MockRowsIter) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRowsIterRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockRowsIter) Next(record *Record) error {
	ret := _m.ctrl.Call(_m, "Next", record)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRowsIterRecorder) Next(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Next", arg0)
}

func (_m *MockRowsIter) OverallRecordCount() *uint64 {
	ret := _m.ctrl.Call(_m, "OverallRecordCount")
	ret0, _ := ret[0].(*uint64)
	return ret0
}

func (_mr *_MockRowsIterRecorder) OverallRecordCount() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "OverallRecordCount")
}
